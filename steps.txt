
## Steps taken while setting up this project
 - First thing is to install node
 # run => npm init
        Most developers run npm init right after creating and navigating into a new project. 
        It makes sense to npm init at the start of the project because we use npm to download dependencies. 
        Once we npm init , we can begin downloading (and saving) our dependencies

 # run => npm install express 
        Express 3.x is a light-weight web application framework to help organize 
        your web application into an MVC architecture on the server side. 
        You can use a variety of choices for your templating language (like EJS, Jade, and Dust.js).
        You can then use a database like MongoDB with Mongoose (for modeling) to provide 
        a backend for your Node.js application. Express.js basically helps you manage everything, 
        from routes, to handling requests and views.

        Redis is a key/value store -- commonly used for sessions and caching in Node.js applications. 
        You can do a lot more with it, but that's what I'm using it for. 
        I use MongoDB for more complex relationships, like line-item <-> order <-> user relationships. 
        There are modules (most notably connect-redis) that will work with Express.js. 
        You will need to install the Redis database on your server.
    
 # run => npm install --save-dev nodemon
        Nodemon is a utility that will monitor for any changes in your source and 
        automatically restart your server

 - Then next step is to add a start in the package.json scripts sections and give it as "nodemon index.js" 
 # run => npm install Mongoose
        This will allow us to interact with MongoDB
 # run => npm install dotenv
        We install this package so that we can secure our passwords and use variables instead in the files.
        
- a link to explain how to link mongoDb and node.js 
        https://buddy.works/tutorials/building-restful-apis-using-express-and-node-with-mongodb-atlas
    
- run => npm install @hapi/joi
        - used for Validating the information.
        - Hapi Joi is an object schema description language and validator for JavaScript objects.
        - With Hapi Joi, we create blueprints or schemas for JavaScript objects 
          (an object that stores information) to ensure validation of key information.
        - Hapi is a simple to use configuration-centric framework with built-in support 
          for input validation, caching, authentication, and other essential facilities for building web and services applications. 

- a link for hapi joi => https://zetcode.com/javascript/hapijoi/


- Steps in the video did not work as they were old
- see syntax below how to define the Joi object and how to validate
- Steps below are for the new version of Joi.


- Validation 
const Joi = require('@hapi/joi');

const schema =Joi.object({
    name:Joi.string()
        .min(6)
        .required(),
    email:Joi.string()
        .min(6)
        .required()
        .email(),
    password:Joi.string()
        .min(6)
        .required()
});

const validation=schema.validate(req.body)

